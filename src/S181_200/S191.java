package S181_200;

/**
 * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 * 示例 1：
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * 提示：
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 */
public class S191 {

    public int hammingWeight(int n) {
        int count = 0;
        for (int i = 0; i < 32; i++) {
            if ((n & (1 << i)) != 0)
                count++;
        }
        return count;
    }

    /**
     * java中没有无符号整型, 编译器使用二进制补码表示有符号整数.
     * 例如: 11111111111111111111111111111101
     * 保持符号位不变, 其余取反然后加1转换为原码:
     * 10000000000000000000000000000011
     * 表示-3.
     * 对补码进行有符号右移2位, 高位补1:
     * 11111111111111111111111111111111
     * 保持符号位不变, 其余取反加1转换为原码:
     * 10000000000000000000000000000001
     * 表示-1.
     * 而无符号右移(>>>)直接在高位补0
     * 00111111111111111111111111111111
     * 表示1073741823.
     */
    public int hammingWeight2(int n) {
        int count = 0;
        while (n != 0) {
            if ((n & 1) == 1)
                count++;
            n >>>= 1; // 无符号右移
        }
        return count;
    }

    /**
     * 重复操作最右边的1会被消去
     * 10110 & 10101 = 10100
     * 10100 & 10011 = 10000
     * 10000 & 01111 = 00000
     * n & (n-1) == 0 即为2的幂
     */
    public int hammingWeight3(int n) {
        int count = 0;
        while (n != 0) {
            count++;
            n &= (n - 1);
        }
        return count;
    }

    public int hammingWeight4(int n) {
        return Integer.bitCount(n);
    }


    public static void main(String[] args) {
        System.out.println(Integer.toBinaryString(-3));
        System.out.println(Integer.toBinaryString(-3 >> 2));
        System.out.println(-3 >> 2);
        System.out.println(Integer.toBinaryString(-3 >>> 2));
        System.out.println(-3 >>> 2);
        System.out.println(new S191().hammingWeight2(-3));
    }
}
